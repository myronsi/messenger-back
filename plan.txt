TODO: Реакции на сообщения:
Эндпоинт /messages/react/{message_id} и WebSocket-сообщения (type: "reaction") не используются.
Нет UI для добавления/отображения реакций.

TODO: Пометка сообщений как прочитанных:
должен содержать новое описание is_read
    "id": msg["id"],
    "content": parsed_content,
    "timestamp": msg["timestamp"],
    "sender": msg["sender"],
    "avatar_url": msg["avatar_url"] if msg["avatar_url"] else "/static/avatars/default.jpg",
    "reply_to": msg["reply_to"],
    "is_deleted": not bool(msg["content"]),
    "type": message_type
}) и передаваться также и по вебсокетам
Нет индикации статуса прочтения сообщений.

TODO: Поиск сообщений:
Эндпоинт /messages/search/{chat_id} не реализован.

TODO: Статус пользователей:
Эндпоинт /auth/status/{username} или WebSocket-сообщения (status_update) из connection_manager.py не используются для отображения статуса собеседника.

TODO: Пагинация сообщений:
Реализовать загрузку дополнительных сообщений при прокрутке вверх.
Использовать параметры offset и limit в /messages/history/{chat_id}.

TODO: Оптимизация типов:
Обновить тип Message для включения file_url, reactions, is_read.
Добавить тип для WebSocket-сообщений.

TODO: Блокировка пользователей:
Добавить возможность блокировать/разблокировать пользователей из списка чатов.
Использовать эндпоинты /auth/block/{username} и /auth/unblock/{username}.

TODO: Модерация групповых чатов:
Добавить контекстное меню для групповых чатов с опциями заглушения/разглушения участников.
Использовать эндпоинты /chats/moderate/{chat_id}/mute и /chats/moderate/{chat_id}/unmute.

TODO: Кастомизация групп:
Добавить возможность добавлять и изменять описания, аватарки и название для группы
Добавить возможность добавлять и удалять пользователей из группы


elastik search

переписание бд для сервера (в конце написания проекта) Рекомендации
1. Комбинируйте БД:
   - Используйте PostgreSQL для хранения пользователей, чатов и метаданных.
   - Добавьте Redis для кэширования, онлайн-статусов и очередей сообщений.
   - Для медиафайлов используйте объектное хранилище (MinIO, S3).

2. Асинхронность:
   - Для Python-сервера выбирайте асинхронные драйверы (asyncpg, motor).

3. Пример архитектуры:
   - Основная БД: PostgreSQL.
   - Кэш/очереди: Redis.
   - Масштабирование: MongoDB или Cassandra (при необходимости).

---

Итог: Для большинства мессенджеров подойдет PostgreSQL + Redis. Если нужна высокая горизонтальная масштабируемость — выбирайте MongoDB или Cassandra.






улучшения система предачи ключа на устройсвах + вход в аккаунт с помощью qr кода 
Пример улучшенного сценария:
1. Пользователь пытается войти с нового устройства → система запрашивает QR-код.
2. На авторизованном устройстве:  
   — Генерируется временный токен, подписанный приватным ключом устройства.  
   — Токен передается в QR-коде.  
3. Новое устройство сканирует QR-код → отправляет токен на сервер.  
4. Сервер проверяет подпись токена → если все ок, передает зашифрованный локальный ключ новому устройству.  
5. Ключ расшифровывается только на новом устройстве (например, через аппаратный модуль безопасности).

---

Итог: QR-код — это удобно, но критически важно добавить многоуровневую защиту (шифрование, ограничение времени жизни, 2FA) и предусмотреть резервные методы на случай сбоев.

уязвимость с отправлением текстового сообщения в чат в формате {"file_url": "/static/uploads/4bcb6c83-5b63-436b-8076-b9f9fb90ae34_1745602970558605m.jpg", "file_name": "1745602970558605m.jpg", "file_type": "image", "file_size": 71865}
при отпралении по WebSocket все ок но при загрузке сообщений из бд (презаход в чат) индефицирует их как изображения или инные файлы

большая проблема пароли не соляться